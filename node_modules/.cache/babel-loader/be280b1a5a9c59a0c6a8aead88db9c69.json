{"ast":null,"code":"import _asyncToGenerator from \"/Users/sachinkumar/Desktop/projects/react/inotebook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/sachinkumar/Desktop/projects/react/inotebook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/sachinkumar/Desktop/projects/react/inotebook/src/Context/notes/NoteState.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n// import { json } from \"react-router-dom\";\n\nvar NoteState = function NoteState(props) {\n  // creates a state s1 which will be accessible to all the children \n  // const s1={\n  //     \"name\":\"sKumar\",\n  //     \"class\":\"7A\"\n  // }\n\n  // const [state,setState] = useState(s1);\n\n  // const update=()=>{\n  //     setTimeout(()=>{\n  //         setState({\n  //             \"name\" : \"mrKumar\",\n  //             \"class\" : \"10A\"\n  //         })\n  //     },1500);\n  // }\n\n  var host = \"http://localhost:4000\"; // on this address mongodb is running\n  // sample notes for a particular user\n  var notesInitial = [];\n\n  // try {\n  var _useState = useState(notesInitial),\n    _useState2 = _slicedToArray(_useState, 2),\n    notes = _useState2[0],\n    setNotes = _useState2[1]; // get all the notes;\n  var getNotes = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var response, json;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(host, \"/api/notes/fetchallnotes\"), {\n                method: 'GET',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n                }\n              });\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n            case 5:\n              json = _context.sent;\n              console.log(json);\n              // console.log(`${host}/api/notes/fetchallnotes`);\n              setNotes(json);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function getNotes() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // add a note\n  var addNote = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(title, description, tag) {\n      var response, note, json;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(\"\".concat(host, \"/api/notes/addnote\"), {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n                },\n                // body me hame title, description and tag dena h jaise ki addnote wali API me pass kiye the same vaise hi\n                body: JSON.stringify({\n                  title: title,\n                  description: description,\n                  tag: tag\n                })\n              });\n            case 2:\n              response = _context2.sent;\n              //const json = response.json({title,description,tag});\n\n              console.log(\"Adding a new note \");\n              note = {\n                \"_id\": \"639c6bb374b02a293asasdasdas359bb43\",\n                // this key will always be unique\n                \"user\": \"639b63020ec8f22e7124944b\",\n                \"title\": title,\n                \"description\": description,\n                \"tag\": tag,\n                \"date\": \"2022-12-16T12:59:31.176Z\",\n                \"__v\": 0\n              };\n              setNotes(notes.concat(note));\n              json = response.json();\n              console.log(json);\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function addNote(_x, _x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // delete a note\n  var deleteNote = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(id) {\n      var response, newNote, json;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetch(\"\".concat(host, \"/api/notes/deletenote/\").concat(id), {\n                method: 'DELETE',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n                }\n                // body me hame kuch bhi nhi dena h\n              });\n            case 2:\n              response = _context3.sent;\n              console.log(\"deleting a note with id: \" + id);\n              newNote = notes.filter(function (note) {\n                return note._id !== id;\n              });\n              setNotes(newNote);\n              json = response.json();\n              console.log(json);\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return function deleteNote(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // edit a note \n  var editNote = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(id, title, description, tag) {\n      var response, json, newNote, index, element;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(\"\".concat(host, \"/api/notes/updatenote/\").concat(id), {\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n                },\n                // body me hame title, description and tag dena h jaise ki editnote wali API me body me pass kiye the same\n                body: JSON.stringify({\n                  title: title,\n                  description: description,\n                  tag: tag\n                })\n              });\n            case 2:\n              response = _context4.sent;\n              // return response.json();\n              json = response.json();\n              console.log(json);\n              // for the client side\n              newNote = JSON.parse(JSON.stringify(notes));\n              index = 0;\n            case 7:\n              if (!(index < newNote.length)) {\n                _context4.next = 17;\n                break;\n              }\n              element = notes[index];\n              if (!(element._id === id)) {\n                _context4.next = 14;\n                break;\n              }\n              newNote[index].title = title;\n              newNote[index].description = description;\n              newNote[index].tag = tag;\n              return _context4.abrupt(\"break\", 17);\n            case 14:\n              index++;\n              _context4.next = 7;\n              break;\n            case 17:\n              setNotes(newNote);\n            case 18:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return function editNote(_x5, _x6, _x7, _x8) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return (\n    /*#__PURE__*/\n    // state will be available to all the chil\n    // <NoteContext.Provider value={{state,update}}> \n    React.createElement(NoteContext.Provider, {\n      value: {\n        notes: notes,\n        addNote: addNote,\n        deleteNote: deleteNote,\n        editNote: editNote,\n        getNotes: getNotes\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, props.children)\n  );\n  // } catch (error) {\n  //     console.log(error.message);\n  // }\n};\n\nexport default NoteState;","map":{"version":3,"names":["React","useState","NoteContext","NoteState","props","host","notesInitial","notes","setNotes","getNotes","fetch","method","headers","response","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNote","filter","_id","editNote","parse","index","length","element","children"],"sources":["/Users/sachinkumar/Desktop/projects/react/inotebook/src/Context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport NoteContext from \"./noteContext\";\n// import { json } from \"react-router-dom\";\n\n\nconst NoteState = (props) => {\n\n  // creates a state s1 which will be accessible to all the children \n  // const s1={\n  //     \"name\":\"sKumar\",\n  //     \"class\":\"7A\"\n  // }\n\n  // const [state,setState] = useState(s1);\n\n  // const update=()=>{\n  //     setTimeout(()=>{\n  //         setState({\n  //             \"name\" : \"mrKumar\",\n  //             \"class\" : \"10A\"\n  //         })\n  //     },1500);\n  // }\n\n  const host = \"http://localhost:4000\"; // on this address mongodb is running\n  // sample notes for a particular user\n  const notesInitial = [];\n\n  // try {\n    const [notes, setNotes] = useState(notesInitial);\n\n\n    // get all the notes;\n    const getNotes = async () => {\n      // API Call \n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n        }\n      });\n      const json = await response.json()\n      console.log(json);\n      // console.log(`${host}/api/notes/fetchallnotes`);\n      setNotes(json);\n    }\n\n\n\n    // add a note\n    const addNote = async (title, description, tag) => {\n      // API call\n      // const URL = host + '/api/notes/fetchallnotes'; // creating end point for the API for addNote\n      const response = await fetch(`${host}/api/notes/addnote`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n        },\n        // body me hame title, description and tag dena h jaise ki addnote wali API me pass kiye the same vaise hi\n        body: JSON.stringify({ title, description, tag })\n      });\n      //const json = response.json({title,description,tag});\n\n      console.log(\"Adding a new note \");\n      const note = {\n        \"_id\": \"639c6bb374b02a293asasdasdas359bb43\", // this key will always be unique\n        \"user\": \"639b63020ec8f22e7124944b\",\n        \"title\": title,\n        \"description\": description,\n        \"tag\": tag,\n        \"date\": \"2022-12-16T12:59:31.176Z\",\n        \"__v\": 0\n      }\n      setNotes(notes.concat(note));\n      const json = response.json();\n      console.log(json);\n    }\n\n    // delete a note\n    const deleteNote = async (id) => { // id is require to delete a note\n      // API call \n      const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n        },\n        // body me hame kuch bhi nhi dena h\n      });\n      console.log(\"deleting a note with id: \" + id);\n      const newNote = notes.filter((note) => { return note._id !== id });\n      setNotes(newNote);\n      const json = response.json();\n      console.log(json);\n    }\n\n    // edit a note \n    const editNote = async (id, title, description, tag) => { // id,title,description and tag is require to edit a note\n      // API call\n      //const URL = host + '/api/notes/updatenote/' + id; // creating end point for the API for editNote\n      const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'auth-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjM5YjYzMDIwZWM4ZjIyZTcxMjQ5NDRiIn0sImlhdCI6MTY3MTE4MDgyMH0.kzMTcYTrQrcEdTBBCJCmhUHPGN86dX_sgluZoCG_yQ8'\n        },\n        // body me hame title, description and tag dena h jaise ki editnote wali API me body me pass kiye the same\n        body: JSON.stringify({ title, description, tag })\n      });\n      // return response.json();\n      const json = response.json();\n      console.log(json);\n      // for the client side\n      let newNote = JSON.parse(JSON.stringify(notes));\n      for (let index = 0; index < newNote.length; index++) {\n        const element = notes[index];\n        if (element._id === id) {\n          newNote[index].title = title;\n          newNote[index].description = description;\n          newNote[index].tag = tag;\n          break;\n        }\n      }\n      setNotes(newNote);\n    }\n\n    return (\n      // state will be available to all the chil\n      // <NoteContext.Provider value={{state,update}}> \n      <NoteContext.Provider value={{ notes, addNote, deleteNote, editNote,getNotes}}>\n        {props.children}\n      </NoteContext.Provider>\n    )\n  // } catch (error) {\n  //     console.log(error.message);\n  // }\n\n\n}\n\n\nexport default NoteState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}